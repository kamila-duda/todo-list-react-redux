{"version":3,"sources":["features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Container/styled.js","common/Container/index.js","useTasks.js","features/tasks/Tasks.js","App.js","serviceWorker.js","GlobalStyle.js","store.js","index.js"],"names":["FormContainer","styled","form","FormInput","input","Button","button","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","action","index","findIndex","task","id","done","actions","selectTasks","Form","useState","taskContent","setNewTask","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","current","focus","trim","content","nanoid","ref","value","onChange","target","type","placeholder","List","ul","Item","li","hidden","css","CheckButton","DeleteButton","Content","span","taskDone","TasksList","removeTask","useSelector","map","key","onClick","className","ButtonsContainer","div","Buttons","setAllDone","length","disabled","every","SectionContainer","section","SectionHeader","h2","SectionBody","Section","title","body","extraContent","Main","main","Container","props","children","useTasks","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","filter","addNewTask","Tasks","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.44a2b94b.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const FormContainer = styled.form`\r\n  background-color: #fff;\r\n  margin: 0;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n`\r\nexport const FormInput = styled.input`\r\n  flex-basis: 75%;\r\n  @media (max-width: 767px) {\r\n    flex-basis: 100%;\r\n    padding: 8px;\r\n    margin-bottom: 10px;\r\n  }\r\n`\r\n\r\nexport const Button = styled.button`\r\n  flex-basis: 20%;\r\n  background-color: teal;\r\n  color: #fff;\r\n  padding: 13px;\r\n  border: unset;\r\n  cursor: pointer;\r\n  transition: 1s;\r\n  &:hover {\r\n    background-color: rgb(3, 192, 192);\r\n    transform: scale(1.1);\r\n  }\r\n  @media (max-width: 767px) {\r\n    flex-basis: 100%;\r\n    padding: 10px;\r\n  }\r\n`\r\n","import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({tasks}, {payload}) => {\r\n            tasks.push(payload)\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone\r\n        },\r\n        toggleTaskDone: (state, action) => {\r\n        const index = state.tasks.findIndex(task => task.id === action.payload)\r\n        state.tasks[index].done = !state.tasks[index].done\r\n        },\r\n    }\r\n});\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone} = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import React, { useState, useRef } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { FormContainer, FormInput, Button } from './styled'\r\nimport {addTask} from \"../tasksSlice\"\r\nimport { nanoid } from '@reduxjs/toolkit'\r\n\r\nconst Form = () => {\r\n  const [taskContent, setNewTask] = useState('')\r\n  const inputRef = useRef(null)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onFormSubmit = event => {\r\n    event.preventDefault()\r\n    inputRef.current.focus()\r\n    if (taskContent.trim() === '') {\r\n      return\r\n    }\r\n\r\n    dispatch(addTask({\r\n      content: taskContent.trim(),\r\n      done: false,\r\n      id: nanoid()\r\n    }\r\n    ));\r\n\r\n    setNewTask('')\r\n  }\r\n\r\n  return (\r\n    <FormContainer onSubmit={onFormSubmit}>\r\n      <FormInput\r\n        ref={inputRef}\r\n        value={taskContent}\r\n        onChange={({ target }) => setNewTask(target.value)}\r\n        type='text'\r\n        placeholder='Co jest do zrobienia?'\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </FormContainer>\r\n  )\r\n}\r\nexport default Form\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport const List = styled.ul`\r\n  background-color: #fff;\r\n  min-height: 70px;\r\n  margin: 0;\r\n  padding: 20px;\r\n  list-style: none;\r\n`\r\n\r\nexport const Item = styled.li`\r\n  border-bottom: 1px solid #ddd;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`\r\n\r\nexport const Button = styled.button`\r\n  width: 30px;\r\n  height: 30px;\r\n  border: none;\r\n  margin: 10px;\r\n  color: #fff;\r\n  font-weight: bold;\r\n  transition: 1s;\r\n`\r\nexport const CheckButton = styled(Button)`\r\n  background-color: green;\r\n\r\n  &:hover {\r\n    background-color: rgb(0, 223, 0);\r\n  }\r\n`\r\n\r\nexport const DeleteButton = styled(Button)`\r\n  background-color: red;\r\n  justify-self: flex-end;\r\n\r\n  &:hover {\r\n    background-color: rgb(255, 111, 111);\r\n  }\r\n`\r\n\r\nexport const Content = styled.span`\r\n  flex-grow: 1;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n\r\n  ${({ taskDone }) =>\r\n    taskDone &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`\r\n\r\n// export const Icon = styled.i`\r\n//     &::before{\r\n//         margin: auto;\r\n//     }\r\n// `;\r\n","import React from 'react'\r\nimport {useSelector, useDispatch} from \"react-redux\"\r\nimport {List, Item, CheckButton, DeleteButton, Content} from \"./styled\"\r\nimport { selectTasks, toggleTaskDone } from '../tasksSlice'\r\n\r\nconst TasksList = ({ removeTask }) => {\r\n  const {tasks, hideDone} = useSelector(selectTasks)\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <Item\r\n          key={task.id}\r\n          hidden = {task.done && hideDone}\r\n        >\r\n          <CheckButton\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            <i className={task.done ? 'icon-ok' : ''}></i>\r\n          </CheckButton>\r\n          <Content\r\n          taskDone = {task.done}\r\n          >\r\n            {task.content}\r\n          </Content>\r\n          <DeleteButton\r\n            onClick={() => removeTask(task.id)}\r\n          >\r\n            <i className='icon-trash-empty'></i>\r\n          </DeleteButton>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default TasksList\r\n","import styled from 'styled-components'\r\n\r\nexport const ButtonsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`\r\nexport const Button = styled.button`\r\n  color: teal;\r\n  cursor: pointer;\r\n  background-color: transparent;\r\n  border: none;\r\n  margin: 10px;\r\n  transition: 1s;\r\n  &:hover{\r\n    color: rgb(10, 218, 218);\r\n  }\r\n  &:disabled{\r\n    color: gray;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { ButtonsContainer, Button } from './styled'\r\nimport { selectTasks, toggleHideDone } from '../tasksSlice'\r\n\r\nconst Buttons = ({ setAllDone }) => {\r\n  // if (tasks.length === 0) {\r\n  //   return null\r\n  // }\r\n  const { tasks, hideDone } = useSelector(selectTasks)\r\n  const dispatch = useDispatch()\r\n  return (\r\n    <ButtonsContainer>\r\n      {tasks.length > 0 && (\r\n        <>\r\n          <Button\r\n           // disabled={tasks.every(({ done }) => !done)}\r\n            onClick={() => dispatch(toggleHideDone())}\r\n          >\r\n            {hideDone ? 'Pokaż' : 'Ukryj'} ukończone\r\n          </Button>\r\n          <Button\r\n            onClick={setAllDone}\r\n            disabled={tasks.every(({ done }) => done)}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </ButtonsContainer>\r\n  )\r\n}\r\nexport default Buttons\r\n","import styled from 'styled-components'\r\n\r\nexport const SectionContainer = styled.section`\r\n  margin: 10px 0;\r\n  background: white;\r\n  box-shadow: 0 0 5px #ddd;\r\n`\r\n\r\nexport const SectionHeader = styled.h2`\r\n  border-bottom: 1px solid #ddd;\r\n  margin: 0;\r\n  padding: 20px;\r\n  font-size: 22px;\r\n`\r\n\r\nexport const SectionBody = styled.div`\r\n  padding: 20px;\r\n`\r\n","import React from 'react'\r\nimport { SectionContainer, SectionHeader, SectionBody } from './styled'\r\n\r\nconst Section = ({ title, body, extraContent }) => (\r\n  <SectionContainer>\r\n    <SectionHeader>{title}</SectionHeader>\r\n    {extraContent}\r\n    <SectionBody>{body}</SectionBody>\r\n  </SectionContainer>\r\n)\r\nexport default Section\r\n","import styled from 'styled-components'\r\n\r\nexport const Main = styled.main`\r\n  max-width: 900px;\r\n  margin: 40px auto;\r\n  \r\n  @media (max-width: 767px) {\r\n    margin: 10px;\r\n  }\r\n`\r\n","import React from \"react\";\r\nimport {Main} from \"./styled\"\r\n\r\nconst Container = (props) => (\r\n    <Main>\r\n        {props.children}\r\n    </Main>\r\n);\r\nexport default Container;","import { useState, useEffect } from 'react'\r\n\r\nconst useTasks = () => {\r\n  const [tasks, setTasks] = useState(\r\n    JSON.parse(localStorage.getItem('tasks')) === null\r\n      ? []\r\n      : JSON.parse(localStorage.getItem('tasks'))\r\n  )\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('tasks', JSON.stringify(tasks))\r\n  }, [tasks])\r\n  const removeTask = id => {\r\n    setTasks(tasks => tasks.filter(task => task.id !== id))\r\n  }\r\n\r\n  const toggleTaskDone = id => {\r\n    setTasks(tasks =>\r\n      tasks.map(task => {\r\n        if (task.id === id) {\r\n          return { ...task, done: !task.done }\r\n        }\r\n        return task\r\n      })\r\n    )\r\n  }\r\n  const setAllDone = () => {\r\n    setTasks(tasks =>\r\n      tasks.map(task => ({\r\n        ...task,\r\n        done: true\r\n      }))\r\n    )\r\n  }\r\n  const addNewTask = taskContent => {\r\n    setTasks(tasks => [\r\n      ...tasks,\r\n      {\r\n        content: taskContent,\r\n        done: false,\r\n        id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1\r\n      }\r\n    ])\r\n  }\r\n  return {\r\n    tasks,\r\n    removeTask,\r\n    toggleTaskDone,\r\n    setAllDone,\r\n    addNewTask\r\n  }\r\n}\r\nexport default useTasks\r\n","import React, { useState, useEffect } from 'react'\r\nimport {useSelector} from \"react-redux\"\r\nimport Form from './Form'\r\nimport TasksList from './TasksList'\r\nimport Buttons from './Buttons'\r\nimport Section from '../../common/Section'\r\nimport Container from '../../common/Container'\r\nimport '../../fontello/css/fontello.css'\r\nimport useTasks from '../../useTasks'\r\nimport {selectTasks} from \"./tasksSlice\"\r\n\r\n\r\nfunction Tasks () {\r\n \r\n\r\n  const {tasks}= useSelector(selectTasks)\r\n\r\n  const {\r\n    //tasks,\r\n    removeTask,\r\n    toggleTaskDone,\r\n    setAllDone,\r\n    addNewTask\r\n  } = useTasks()\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Lista zadań</h1>\r\n      <Section\r\n        title='Dodaj nowe zadanie'\r\n        body={<Form addNewTask={addNewTask} />}\r\n      />\r\n      <Section\r\n        title='Lista zadań'\r\n        extraContent={\r\n          <Buttons\r\n          />\r\n        }\r\n        body={\r\n          <TasksList\r\n            removeTask={removeTask}\r\n            toggleTaskDone={toggleTaskDone}\r\n          />\r\n        }\r\n      />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Tasks\r\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n  box-sizing: border-box;\r\n}\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: inherit;\r\n} \r\nbody{\r\n  background-color: #ddd;\r\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n}\r\n`;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    }\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\"\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {GlobalStyle} from \"./GlobalStyle\"\r\nimport store from \"./store\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <GlobalStyle/>\r\n    <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}