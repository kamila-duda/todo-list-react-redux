{"version":3,"sources":["kd.jpg","common/Section/styled.js","common/Section/index.js","common/Container/styled.js","common/Container/index.js","features/author/styled.js","features/author/AuthorPage.js","features/tasks/TasksPage/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TasksList/styled.js","features/tasks/TasksPage/TasksList/index.js","features/tasks/TasksPage/styled.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/queryParameters.js","features/tasks/searchQueryParameterName.js","features/tasks/TasksPage/ExampleTasksButton/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","styled.js","App.js","serviceWorker.js","GlobalStyle.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js"],"names":["module","exports","SectionContainer","styled","section","SectionHeader","h2","SectionBody","div","Section","title","body","extraContent","Main","main","Container","props","children","AuthorDescribeContainer","Img","img","AuthorDescribe","p","src","profile","FormContainer","form","Button","button","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","tasksLoading","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","setTasks","setTasksLoading","actions","selectTasksState","selectTasks","selectHideDone","selectExampleTasksLoading","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","input","Form","useState","taskContent","setNewTask","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","current","focus","trim","content","nanoid","ref","value","onChange","target","type","placeholder","List","ul","Item","li","hidden","css","CheckButton","DeleteButton","Content","span","taskDone","StyledLink","Link","TasksList","location","useLocation","query","URLSearchParams","search","get","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","key","onClick","className","to","ButtonsContainer","Buttons","areTasksEmpty","isEveryTaskDone","disabled","Wrapper","useQueryParameter","replaceQueryParameter","history","useHistory","searchParams","delete","set","pathname","toString","useReplaceQueryParameter","ExampleTasksButton","loading","TasksPage","Search","TaskPage","useParams","find","getTaskById","Navigation","nav","NavigationList","NavigationListItem","StyledNavLink","NavLink","attrs","activeClassName","path","exact","AuthorPage","Boolean","window","hostname","match","GlobalStyle","createGlobalStyle","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","watchFetchExampleTasks","put","delay","call","exampleTasks","alert","select","takeLatest","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.945ce13a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kd.e4ba440a.jpg\";","import styled from 'styled-components'\r\n\r\nexport const SectionContainer = styled.section`\r\n  margin: 10px 0;\r\n  background: white;\r\n  box-shadow: 0 0 5px #ddd;\r\n`\r\n\r\nexport const SectionHeader = styled.h2`\r\n  border-bottom: 1px solid #ddd;\r\n  margin: 0;\r\n  padding: 20px;\r\n  font-size: 22px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport const SectionBody = styled.div`\r\n  padding: 20px;\r\n`\r\n","import React from 'react'\r\nimport { SectionContainer, SectionHeader, SectionBody } from './styled'\r\n\r\nconst Section = ({ title, body, extraContent }) => (\r\n  <SectionContainer>\r\n    <SectionHeader>{title}{extraContent}</SectionHeader>\r\n    \r\n    <SectionBody>{body}</SectionBody>\r\n  </SectionContainer>\r\n)\r\nexport default Section\r\n","import styled from 'styled-components'\r\n\r\nexport const Main = styled.main`\r\n  max-width: 900px;\r\n  margin: 40px auto;\r\n  \r\n  @media (max-width: 767px) {\r\n    margin: 10px;\r\n  }\r\n`\r\n","import React from \"react\";\r\nimport {Main} from \"./styled\"\r\n\r\nconst Container = (props) => (\r\n    <Main>\r\n        {props.children}\r\n    </Main>\r\n);\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const AuthorDescribeContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n`;\r\nexport const Img = styled.img`\r\n  max-width: 300px;\r\n  object-fit: cover;\r\n  margin: 10px;\r\n`;\r\nexport const AuthorDescribe = styled.p`\r\n  max-width: 400px;\r\n  text-align: justify;\r\n  margin: 10px;\r\n  font-family: monospace;\r\n  font-size: 18px;\r\n`;\r\n","import React from \"react\";\r\nimport Section from \"../../common/Section\";\r\nimport Container from \"../../common/Container\";\r\nimport \"../../fontello/css/fontello.css\";\r\nimport profile from \"../../kd.jpg\";\r\nimport { AuthorDescribeContainer, Img, AuthorDescribe } from \"./styled\";\r\n\r\nexport default () => (\r\n  <Container>\r\n    <h1>O autorce</h1>\r\n    <Section\r\n      title=\"Kamila Duda\"\r\n      body={\r\n        <AuthorDescribeContainer>\r\n          <Img src={profile}></Img>\r\n          <AuthorDescribe>\r\n            W 2019 roku podjęłam decyzję o przebranżowieniu się w kierunku\r\n            programowania. Zaczęłam od nauki języka <b>HTML</b>, potem poznałam{\" \"}\r\n            <b>CSS</b> i odrobinę <b>JavaScript</b>, którego uczę się obecnie na\r\n            kursie YouCode :) Znam <b>Bootstrapa</b>, odrobinę <b>PHP</b> oraz{\" \"}\r\n            <b>MySQL</b>. Każdego dnia systematycznie pogłębiam swoją wiedzę z\r\n            książek, kursów online, blogów, stron internetowych. Robię własne\r\n            projekty, dzięki którym utrwalam to co już poznałam oraz uczę się\r\n            nowych zagadnień.\r\n          </AuthorDescribe>\r\n        </AuthorDescribeContainer>\r\n      }\r\n    />\r\n  </Container>\r\n);\r\n","import styled from 'styled-components'\r\n\r\nexport const FormContainer = styled.form`\r\n  background-color: #fff;\r\n  margin: 0;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport const Button = styled.button`\r\n  flex-basis: 20%;\r\n  background-color: teal;\r\n  color: #fff;\r\n  padding: 13px;\r\n  border: unset;\r\n  cursor: pointer;\r\n  transition: 1s;\r\n  &:hover {\r\n    background-color: rgb(3, 192, 192);\r\n    transform: scale(1.1);\r\n  }\r\n  @media (max-width: 767px) {\r\n    flex-basis: 100%;\r\n    padding: 10px;\r\n  }\r\n`\r\n","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = (tasks) =>\r\n  localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n  JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: getTasksFromLocalStorage(),\r\n    hideDone: false,\r\n    tasksLoading: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: task }) => {\r\n      tasks.push(task);\r\n    },\r\n    toggleHideDone: (state) => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n    removeTask: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks.splice(index, 1);\r\n    },\r\n    setAllDone: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true;\r\n      }\r\n    },\r\n    fetchExampleTasks: () => {},\r\n    setTasks: (state, { payload: tasks }) => {\r\n      state.tasks = tasks;\r\n    },\r\n    setTasksLoading: (state) => {\r\n      state.tasksLoading = !state.tasksLoading;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  toggleHideDone,\r\n  toggleTaskDone,\r\n  removeTask,\r\n  setAllDone,\r\n  fetchExampleTasks,\r\n  setTasks,\r\n  setTasksLoading,\r\n} = tasksSlice.actions;\r\nconst selectTasksState = (state) => state.tasks;\r\n\r\nexport const selectTasks = (state) => selectTasksState(state).tasks;\r\nexport const selectHideDone = (state) => selectTasksState(state).hideDone;\r\nexport const selectExampleTasksLoading = (state) =>\r\n  selectTasksState(state).tasksLoading;\r\nexport const selectAreTasksEmpty = (state) => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = (state) =>\r\n  selectTasks(state).every(({ done }) => done);\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n  selectTasks(state).find(({ id }) => id === taskId);\r\nexport const selectTasksByQuery = (state, query) => {\r\n  const tasks = selectTasks(state);\r\n  if (!query || query.trim() === \"\") {\r\n    return tasks;\r\n  }\r\n  return selectTasks(state).filter(({ content }) =>\r\n    content.toUpperCase().includes(query.trim().toUpperCase())\r\n  );\r\n};\r\nexport default tasksSlice.reducer;\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.input`\r\n  flex-basis: 75%;\r\n  @media (max-width: 767px) {\r\n    flex-basis: 100%;\r\n    padding: 8px;\r\n    margin-bottom: 10px;\r\n  }\r\n`","import React, { useState, useRef } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { FormContainer, Button} from './styled'\r\nimport { addTask } from '../../tasksSlice'\r\nimport { nanoid } from '@reduxjs/toolkit'\r\nimport FormInput from \"../../Input\"\r\nconst Form = () => {\r\n  const [taskContent, setNewTask] = useState('')\r\n  const inputRef = useRef(null)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onFormSubmit = event => {\r\n    event.preventDefault()\r\n    inputRef.current.focus()\r\n    if (taskContent.trim() === '') {\r\n      return\r\n    }\r\n\r\n    dispatch(\r\n      addTask({\r\n        content: taskContent.trim(),\r\n        done: false,\r\n        id: nanoid()\r\n      })\r\n    )\r\n    setNewTask('')\r\n  }\r\n\r\n  return (\r\n    <FormContainer onSubmit={onFormSubmit}>\r\n      <FormInput\r\n        ref={inputRef}\r\n        value={taskContent}\r\n        onChange={({ target }) => setNewTask(target.value)}\r\n        type='text'\r\n        placeholder='Co jest do zrobienia?'\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </FormContainer>\r\n  )\r\n}\r\nexport default Form\r\n","import { Link } from 'react-router-dom'\r\nimport styled, { css } from 'styled-components'\r\n\r\nexport const List = styled.ul`\r\n  background-color: #fff;\r\n  min-height: 70px;\r\n  margin: 0;\r\n  padding: 20px;\r\n  list-style: none;\r\n`\r\n\r\nexport const Item = styled.li`\r\n  border-bottom: 1px solid #ddd;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`\r\n\r\nexport const Button = styled.button`\r\n  width: 30px;\r\n  height: 30px;\r\n  border: none;\r\n  margin: 10px;\r\n  color: #fff;\r\n  font-weight: bold;\r\n  transition: 1s;\r\n`\r\nexport const CheckButton = styled(Button)`\r\n  background-color: green;\r\n\r\n  &:hover {\r\n    background-color: rgb(0, 223, 0);\r\n  }\r\n`\r\n\r\nexport const DeleteButton = styled(Button)`\r\n  background-color: red;\r\n  justify-self: flex-end;\r\n\r\n  &:hover {\r\n    background-color: rgb(255, 111, 111);\r\n  }\r\n`\r\n\r\nexport const Content = styled.span`\r\n  flex-grow: 1;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n\r\n  ${({ taskDone }) =>\r\n    taskDone &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`\r\nexport const StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: teal;\r\n    transition: 0.3s;\r\n    &:hover {\r\n      color: rgb(10, 218, 218);\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, CheckButton, DeleteButton, Content, StyledLink } from \"./styled\";\r\nimport {\r\n  toggleTaskDone,\r\n  removeTask,\r\n  selectHideDone, selectTasksByQuery\r\n} from \"../../tasksSlice\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst TasksList = () => {\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const query = searchParams.get(\"szukaj\");\r\n\r\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <List>\r\n      {tasks.map((task) => (\r\n        <Item key={task.id} hidden={task.done && hideDone}>\r\n          <CheckButton onClick={() => dispatch(toggleTaskDone(task.id))}>\r\n            <i className={task.done ? \"icon-ok\" : \"\"}></i>\r\n          </CheckButton>\r\n          <Content taskDone={task.done}><StyledLink to={`/zadania/${task.id}`}>{task.content}</StyledLink></Content>\r\n          <DeleteButton onClick={() => dispatch(removeTask(task.id))}>\r\n            <i className=\"icon-trash-empty\"></i>\r\n          </DeleteButton>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TasksList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`\r\nexport const Button = styled.button`\r\ncolor: teal;\r\ncursor: pointer;\r\nbackground-color: transparent;\r\nborder: none;\r\nfont-size: 15px;\r\ntransition: 1s;\r\n&:hover{\r\n  color: rgb(10, 218, 218);\r\n}\r\n&:disabled{\r\n  color: gray;\r\n}\r\n`","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  toggleHideDone,\r\n  setAllDone,\r\n  selectIsEveryTaskDone,\r\n  selectAreTasksEmpty,\r\n  selectHideDone,\r\n} from \"../../tasksSlice\";\r\nimport { ButtonsContainer, Button } from \"../styled\";\r\n\r\nconst Buttons = () => {\r\n  const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <ButtonsContainer>\r\n      {!areTasksEmpty && (\r\n        <>\r\n          <Button onClick={() => dispatch(toggleHideDone())}>\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={isEveryTaskDone}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </ButtonsContainer>\r\n  );\r\n};\r\nexport default Buttons;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay: grid;\r\ngrid-template-columns: 1fr;\r\n`;","import React from \"react\";\r\nimport FormInput from \"../../Input\";\r\nimport { Wrapper } from \"./styled\";\r\nimport { key } from \"../../searchQueryParameterName\";\r\nimport {\r\n  useQueryParameter,\r\n  useReplaceQueryParameter,\r\n} from \"../../queryParameters\";\r\n\r\nexport default () => {\r\n  const query = useQueryParameter(key);\r\n  const replaceQueryParameter = useReplaceQueryParameter();\r\n  const onInputChange = ({ target }) => {\r\n    replaceQueryParameter({\r\n      key: key,\r\n      value: target.value.trim() !== \"\" ? target.value : \"\",\r\n    });\r\n  };\r\n  return (\r\n    <Wrapper>\r\n      <FormInput\r\n        placeholder=\"Filtruj zadania\"\r\n        value={query || \"\"}\r\n        onChange={onInputChange}\r\n      />\r\n    </Wrapper>\r\n  );\r\n};\r\n","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = (key) => {\r\n  const location = useLocation();\r\n  return new URLSearchParams(location.search).get(key);\r\n};\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n\r\n  return ({ key, value }) => {\r\n    if (value.trim() === \"\") {\r\n      searchParams.delete(key);\r\n    } else {\r\n      searchParams.set(key, value);\r\n    }\r\n    history.push(`${location.pathname}?${searchParams.toString()}`);\r\n  };\r\n};\r\n","export const key = \"szukaj\";","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, ButtonsContainer } from \"../styled\";\r\nimport { fetchExampleTasks, selectExampleTasksLoading } from \"./../../tasksSlice\";\r\n\r\nconst ExampleTasksButton = () => {\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(selectExampleTasksLoading);\r\n\r\n    return (<>\r\n        <ButtonsContainer>\r\n            <Button\r\n            onClick={() => dispatch(fetchExampleTasks())}\r\n            disabled={loading}\r\n        >\r\n            {loading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n        </Button>\r\n        </ButtonsContainer>\r\n            </>\r\n    );\r\n};\r\nexport default ExampleTasksButton;","import React from \"react\";\r\nimport Form from \"../TasksPage/Form\";\r\nimport TasksList from \"../TasksPage/TasksList\";\r\nimport Buttons from \"../TasksPage/Buttons\"\r\nimport Section from \"../../../common/Section\";\r\nimport Container from \"../../../common/Container\";\r\nimport \"../../../fontello/css/fontello.css\";\r\nimport Search from \"./Search\";\r\nimport ExampleTasksButton from \"./ExampleTasksButton\";\r\n\r\nfunction TasksPage() {\r\n  return (\r\n    <Container>\r\n      <h1>Lista zadań</h1>\r\n      <Section title=\"Dodaj nowe zadanie\"\r\n        extraContent={<ExampleTasksButton />}\r\n        body={<Form />} />\r\n      <Section title=\"Wyszukiwarka\" body={<Search />} />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        extraContent={<Buttons />}\r\n        body={<TasksList />}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TasksPage;\r\n","import React from \"react\";\r\nimport Section from \"../../../common/Section\";\r\nimport Container from \"../../../common/Container\";\r\nimport \"../../../fontello/css/fontello.css\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction TaskPage() {\r\n    const { id }  = useParams();\r\n  const task = useSelector((state) => getTaskById(state, id));\r\n    return (\r\n    <Container>\r\n      <h1>Szczegóły zadania</h1>\r\n      <Section\r\n        title={task ? task.content : \"Nie znaleziono zadania 😐\"}\r\n        body={\r\n            <>\r\n                \r\n            <strong>Ukończono:</strong>\r\n            {task ? task.done ? \"Tak\" : \"Nie\" : \"Brak\"}\r\n          </>\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TaskPage;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Navigation = styled.nav`\r\n  background-color: teal;\r\n`;\r\nexport const NavigationList = styled.ul`\r\n  list-style: none;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 0;\r\n  padding: 15px;\r\n`;\r\nexport const NavigationListItem = styled.li`\r\n  margin-left: 20px;\r\n  margin-right: 20px;\r\n`;\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n  activeClassName: \"active\",\r\n}))`\r\n  color: #fff;\r\n  text-decoration: none;\r\n  &.active {\r\n    font-weight: bold;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport {\r\n  Navigation,\r\n  NavigationList,\r\n  NavigationListItem,\r\n  StyledNavLink,\r\n} from \"./styled\";\r\n\r\nexport default () => (\r\n  <HashRouter>\r\n    <Navigation>\r\n      <NavigationList>\r\n        <NavigationListItem>\r\n          <StyledNavLink to=\"/zadania\">Zadania</StyledNavLink>\r\n        </NavigationListItem>\r\n        <NavigationListItem>\r\n          <StyledNavLink to=\"/autorka\">O autorce</StyledNavLink>\r\n        </NavigationListItem>\r\n      </NavigationList>\r\n    </Navigation>\r\n    <Switch>\r\n      <Route path=\"/zadania/:id\">\r\n        <TaskPage />\r\n      </Route>\r\n      <Route path=\"/zadania\">\r\n        <TasksPage />\r\n      </Route>\r\n      <Route exact path=\"/autorka\">\r\n        <AuthorPage />\r\n      </Route>\r\n      <Route path=\"/\">\r\n        <Redirect to=\"/zadania\" />\r\n      </Route>\r\n    </Switch>\r\n  </HashRouter>\r\n);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n  box-sizing: border-box;\r\n}\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: inherit;\r\n} \r\nbody{\r\n  background-color: #ddd;\r\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n}\r\n`;","export const getExampleTasks = async () => {\r\n  const response = await fetch(\"/todo-list-react-redux/exampleTasks.json\");\r\n\r\n  if (!response.ok) {\r\n    new Error(response.statusText);\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n","import {\r\n  takeLatest,\r\n  call,\r\n  put,\r\n  takeEvery,\r\n  select,\r\n  delay,\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  fetchExampleTasks,\r\n  selectTasks,\r\n  setTasks,\r\n  setTasksLoading,\r\n} from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n  try {\r\n    yield put(setTasksLoading());\r\n    yield delay(1000);\r\n    const exampleTasks = yield call(getExampleTasks);\r\n    yield put(setTasks(exampleTasks));\r\n    yield put(setTasksLoading());\r\n  } catch (error) {\r\n    yield call(alert, \"Coś poszło nie tak\");\r\n    yield put(setTasksLoading());\r\n  }\r\n}\r\nfunction* saveTasksInLocalStorageHandler() {\r\n  const tasks = yield select(selectTasks);\r\n  yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* watchFetchExampleTasks() {\r\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}\r\n","import {all} from \"redux-saga/effects\";\r\nimport { watchFetchExampleTasks } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        watchFetchExampleTasks()\r\n    ]);\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport rootSaga from \"./rootSaga\"\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { Provider } from 'react-redux'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { GlobalStyle } from './GlobalStyle'\r\nimport store from './store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <GlobalStyle />\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}